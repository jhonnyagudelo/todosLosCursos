{"version":3,"sources":["ejercicio/observer/index.ts"],"names":[],"mappings":"AASA,IAAA,YAAA,GAAA,YAAA;AAEE,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AADA,SAAA,SAAA,GAAwB,EAAxB;AAEE,QAAM,EAAE,GAAqB,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAA7B;AACA,IAAA,EAAE,CAAC,gBAAH,CAAoB,OAApB,EAA6B,YAAA;AAC3B,MAAA,KAAI,CAAC,MAAL,CAAY,EAAE,CAAC,KAAf;AACD,KAFD;AAGD;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,QAAT,EAA2B;AACzB,SAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACD,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAA8B;AAC5B,QAAM,KAAK,GAAG,KAAK,SAAL,CAAe,SAAf,CAAyB,UAAC,GAAD,EAAI;AACzC,aAAO,GAAG,KAAK,QAAf;AACD,KAFa,CAAd;AAIA,SAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,EAA6B,CAA7B;AACD,GAND;;AAQA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACd,SAAK,SAAL,CAAe,OAAf,CAAuB,UAAC,QAAD,EAAS;AAAK,aAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAA;AAAqB,KAA1D;AACD,GAFD;;AAGF,SAAA,YAAA;AAxBA,CAAA,EAAA;;AA0BA,IAAA,YAAA,GAAA,YAAA;AAEE,WAAA,YAAA,GAAA;AACE,SAAK,EAAL,GAAU,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAV;AACD;;AACD,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACd,SAAK,EAAL,CAAQ,SAAR,GAAoB,IAApB;AACD,GAFD;;AAGF,SAAA,YAAA;AARA,CAAA,EAAA;;AAUA,IAAM,KAAK,GAAG,IAAI,YAAJ,EAAd;AACA,IAAM,OAAO,GAAG,IAAI,YAAJ,EAAhB;AAEA,KAAK,CAAC,QAAN,CAAe,OAAf;AAEA,UAAU,CAAC,YAAA;AAAM,SAAA,KAAK,CAAC,WAAN,CAAkB,OAAlB,CAAA;AAA0B,CAAjC,EAAmC,IAAnC,CAAV","file":"observer.01fa9852.js","sourceRoot":"..","sourcesContent":["interface Observer {\n  update: (data: any) => void;\n}\n\ninterface Subject {\n  subcribe: (observer: Observer) => void;\n  unsubscribe: (observer: Observer) => void;\n}\n\nclass BitCoinPrice implements Subject {\n  observers: Observer[] = [];\n  constructor() {\n    const el: HTMLInputElement = document.querySelector(\"#value\");\n    el.addEventListener(\"input\", () => {\n      this.notify(el.value);\n    });\n  }\n\n  subcribe(observer: Observer) {\n    this.observers.push(observer);\n  }\n\n  unsubscribe(observer: Observer) {\n    const index = this.observers.findIndex((obs) => {\n      return obs === observer;\n    });\n\n    this.observers.splice(index, 1);\n  }\n\n  notify(data: any) {\n    this.observers.forEach((observer) => observer.update(data));\n  }\n}\n\nclass priceDisplay implements Observer {\n  private el: HTMLElement;\n  constructor() {\n    this.el = document.querySelector(\"#price\");\n  }\n  update(data: any) {\n    this.el.innerText = data;\n  }\n}\n\nconst value = new BitCoinPrice();\nconst display = new priceDisplay();\n\nvalue.subcribe(display);\n\nsetTimeout(() => value.unsubscribe(display), 5000);\n"]}