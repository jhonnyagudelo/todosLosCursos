{"version":3,"sources":["ejercicio/promesas/index.js"],"names":["apiKey","getMovie","id","url","response","fetch","data","json","getPopularMovies","results","getTopMoviesIds","n","popularMovies","ids","slice","map","movie","renderMovies","movies","movieList","document","getElementById","innerHTML","forEach","listItem","createElement","poster_path","title","release_date","appendChild","getTopMoviesInSequence","push","getTopMoviesInParallel","getFastestTopMovie","onclick"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,MAAMA,MAAM,GAAG,kCAAf;;AAEA,eAAeC,QAAf,CAAwBC,EAAxB,EAA4B;AAC1B,QAAMC,GAAG,GAAI,sCAAqCD,EAAG,YAAWF,MAAO,EAAvE;AACA,QAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,QAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,SAAOD,IAAP;AACD;;AAED,eAAeE,gBAAf,GAAkC;AAChC,QAAML,GAAG,GAAI,+EAA8EH,MAAO,EAAlG;AACA,QAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,QAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,SAAOD,IAAI,CAACG,OAAZ;AACD;;AAED,eAAeC,eAAf,CAA+BC,CAAC,GAAG,CAAnC,EAAsC;AACpC;AACA;AACA;AACA,QAAMC,aAAa,GAAG,MAAMJ,gBAAgB,EAA5C;AACA,QAAMK,GAAG,GAAGD,aAAa,CAACE,KAAd,CAAoB,CAApB,EAAuBH,CAAvB,EAA0BI,GAA1B,CAA+BC,KAAD,IAAWA,KAAK,CAACd,EAA/C,CAAZ;AACA,SAAOW,GAAP;AACD;;AAED,SAASI,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,QAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAlB;AACAF,EAAAA,SAAS,CAACG,SAAV,GAAsB,EAAtB;AAEAJ,EAAAA,MAAM,CAACK,OAAP,CAAgBP,KAAD,IAAW;AACxB,UAAMQ,QAAQ,GAAGJ,QAAQ,CAACK,aAAT,CAAuB,IAAvB,CAAjB;AACAD,IAAAA,QAAQ,CAACF,SAAT,GAAsB;AAC1B,uDAAuDN,KAAK,CAACU,WAAY;AACzE,kBAAkBV,KAAK,CAACW,KAAM;AAC9B,iCAAiCX,KAAK,CAACY,YAAa;AACpD,aAJI;AAMAT,IAAAA,SAAS,CAACU,WAAV,CAAsBL,QAAtB;AACD,GATD;AAUD;;AAED,eAAeM,sBAAf,GAAwC;AACtC,QAAMjB,GAAG,GAAG,MAAMH,eAAe,EAAjC;AACA,QAAMQ,MAAM,GAAG,EAAf;;AACA,OAAK,MAAMhB,EAAX,IAAiBW,GAAjB,EAAsB;AACpB,UAAMG,KAAK,GAAG,MAAMf,QAAQ,CAACC,EAAD,CAA5B;AACAgB,IAAAA,MAAM,CAACa,IAAP,CAAYf,KAAZ;AACD;;AACD,SAAOE,MAAP;AACD;;AAED,SAASc,sBAAT,GAAkC;AAChC,SAAO,EAAP;AACD;;AAED,eAAeC,kBAAf,GAAoC;AAClC,SAAO,EAAP;AACD;;AAEDb,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCa,OAApC,GAA8C,kBAAkB;AAC9D,QAAMhB,MAAM,GAAG,MAAMY,sBAAsB,EAA3C;AACA,SAAOb,YAAY,CAACC,MAAD,CAAnB;AACD,CAHD;;AAKAE,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCa,OAApC,GAA8C,kBAAkB;AAC9D,QAAMhB,MAAM,GAAG,MAAMc,sBAAsB,EAA3C;AACAf,EAAAA,YAAY,CAACC,MAAD,CAAZ;AACD,CAHD;;AAKAE,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCa,OAAnC,GAA6C,kBAAkB;AAC7D,QAAMlB,KAAK,GAAG,MAAMiB,kBAAkB,EAAtC;AACAhB,EAAAA,YAAY,CAAC,CAACD,KAAD,CAAD,CAAZ;AACD,CAHD","file":"promesas.0454fe8a.js","sourceRoot":"..","sourcesContent":["// Ejemplo: renderMovies([{ title: \"Spider-Man\", release_date: \"2019-06-30\", poster_path: \"/rjbNpRMoVvqHmhmksbokcyCr7wn.jpg\" }])\n// Traducir las funciones de usar thens a usar async/await\n// Crear funci贸n para que no nos gastemos la cantidad de requests demasiado rapido\n// Crear funci贸n donde hacemos requests secuenciales\n// Crear funci贸n donde hacemos requests en paralelo\n// Crear funci贸n donde obtenemos el primer request que llegue\n\n// The Movie Database API: https://developers.themoviedb.org/3/getting-started/introduction\nconst apiKey = \"b89fc45c2067cbd33560270639722eae\";\n\nasync function getMovie(id) {\n  const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n}\n\nasync function getPopularMovies() {\n  const url = `https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=${apiKey}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  return data.results;\n}\n\nasync function getTopMoviesIds(n = 3) {\n  //return getPopularMovies().then(popularMovies =>\n  //popularMovies.slice(0, n).map(movie => movie.id)\n  //);\n  const popularMovies = await getPopularMovies();\n  const ids = popularMovies.slice(0, n).map((movie) => movie.id);\n  return ids;\n}\n\nfunction renderMovies(movies) {\n  const movieList = document.getElementById(\"movies\");\n  movieList.innerHTML = \"\";\n\n  movies.forEach((movie) => {\n    const listItem = document.createElement(\"li\");\n    listItem.innerHTML = `\n            <img src=\"https://image.tmdb.org/t/p/w342${movie.poster_path}\" />\n            <h5>${movie.title}</h5>\n            <p>Released on <em>${movie.release_date}</em></p>\n            `;\n\n    movieList.appendChild(listItem);\n  });\n}\n\nasync function getTopMoviesInSequence() {\n  const ids = await getTopMoviesIds();\n  const movies = [];\n  for (const id of ids) {\n    const movie = await getMovie(id);\n    movies.push(movie);\n  }\n  return movies;\n}\n\nfunction getTopMoviesInParallel() {\n  return [];\n}\n\nasync function getFastestTopMovie() {\n  return {};\n}\n\ndocument.getElementById(\"sequence\").onclick = async function () {\n  const movies = await getTopMoviesInSequence();\n  return renderMovies(movies);\n};\n\ndocument.getElementById(\"parallel\").onclick = async function () {\n  const movies = await getTopMoviesInParallel();\n  renderMovies(movies);\n};\n\ndocument.getElementById(\"fastest\").onclick = async function () {\n  const movie = await getFastestTopMovie();\n  renderMovies([movie]);\n};\n"]}