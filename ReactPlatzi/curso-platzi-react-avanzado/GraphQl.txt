GraphQL es un lenguaje creado por Facebook para obtener solo los datos que necesitamos en nuestra aplicación. Imaginemos que tenemos una REST API con WordPress, él nos entrega un JSON con mucha data innecesaria y solo queremos unos cuantos fields; GraphQL hace posible obtener únicamente esa data.

React Apollo es un cliente que nos va a permitir conectarnos a un servidor GraphQL.

Vamos a instalar npm i apollo-boost, una utilidad que nos permite inicializar nuestra conexión con un servidor de Apollo muy rápidamente y sin configuración, necesitaremos npm i react-apollo el cual es la integración de Apollo con React y finalmente npm i graphql.

hora hay una nueva forma de hacerlo y mucho más fácil, veamos:
Primero debemos instalar dos dependencias:
npm install @apollo/client graphql
@apollo/client contiene todo lo que se necesita para configurar ApolloClient y más.
@graphql proporciona la lógica para analizar consultas GraphQL.
.
Ahora en nuestro index.js realizamos lo siguiente:

import React from 'react';
import ReactDOM from 'react-dom';
import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';

import App from './App';

const client = new ApolloClient({
  uri: 'https://petsgram-server-mappedev-339gmifsh.vercel.app/graphql',
  cache: new InMemoryCache(),
});

ReactDOM.render(
  <ApolloProvider client={client}>
    <App />
  </ApolloProvider>,
  document.getElementById('app')
);
InMemoryCache nos permite guardar los datos solicitados en cache.
.
Por último realizamos la query en nuestro componente y renderizamos cada elemento de la data obtenida:

import React from 'react';

import PhotoCard from '../PhotoCard';

import { gql, useQuery } from '@apollo/client';

const GET_PHOTOS = gql`
  query getPhotos {
    photos {
      id
      categoryId
      src
      likes
      userId
      liked
    }
  }
`;

export default function ListOfPhotoCards() {
  const { loading, error, data } = useQuery(GET_PHOTOS);

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error!!!</p>;

  return (
    <ul>
      {data.photos.map((photo) => (
        <li key={photo.id}>
          <PhotoCard id={photo.id} likes={photo.likes} src={photo.src} />
        </li>
      ))}
    </ul>
  );
}
.
Espero que les haya servidor, si desean más información pueden revisar la documentación que está más detallada
